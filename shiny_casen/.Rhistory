{
ww<-names(w[j])
vv<-tolower(ww)
#Primera salida
print(vv)
print(w[[j]])
}
#vv es la salida de nuestra comuna en etiqueta de la tabla .sav
#estae es el valor de la primera frecuencia distinta a 0
#
lll<-tabla[3,]
lll
llll<-lll[,1]
ppp <- data_frame()
w <- dataset2006[[6]] %>% attr('labels')
#w
for(j in 1: 300)
{
ww<-names(w[j])
vv<-tolower(ww)
#Primera salida
#print(vv)
#print(w[[j]])
}
#vv es la salida de nuestra comuna en etiqueta de la tabla .sav
#estae es el valor de la primera frecuencia distinta a 0
#
lll<-tabla[3,]
lll
llll<-lll[,1]
llll
#tabla[6,5]
#lll <- tabla[6,]
sentenceString <- toString(lll[,1])
searchString <- ' '
replacementString <- ''
sentenceString = sub(searchString,replacementString,sentenceString)
sentenceString
#este es el nombre de la comuna de la tabla de frecuencias
#   if(tabla[i,5]!=0)
#   {
#     # se carga una fila con todas las columas de la fila en cuestion
#     lll <- tabla[i,]
#
#     for(j in 1: 348)
#     {
#
#       #aca metemos la logica de conversión para poder hacer correctamente el booleano
#       #tenemos que obtener este elemento limpio lll[,1]
#       #
#       sentenceString <- toString(lll[,1])
#       searchString <- ' '
#       replacementString <- ''
#       sentenceString = sub(searchString,replacementString,sentenceString)
#       sentenceString
#       #
#       ww<-names(w[j])
#       vv<-tolower(ww)
#       if(sentenceString==vv)
#       {
#
#         lll <- cbind(lll,w[[j]])
#         lll <- cbind(lll,"2006")
#       }
#
#     }
#     ####### A lll(que es una fila) tenemos que adjuntar le una nueva columna: w[[i]]
#     ####### tenemos que adjuntarle otra columna en duro llamada 2006
#
#     # debemos establecer un ciclo for para dentro de el establecer una condicion IF que compare la columna "a" de tabla con names(w[i])
#     # y que si se produce el match que asigne a lll el elemento w[[i]]
#
#
#
#     ppp <-rbind(ppp,lll)
#
# }
#
# }
###########################3 Este trozo nos permite obtener las frecuencias mayores a 0########
ppp <- data_frame()
# vamos a recorrer todad las filas de la salidas de las combinatorias para la frecuencia
for( i in 1: nrow(tabla))
{
#si para la fila respectiva la frecuencia es distinta a 0
if(tabla[i,5]!=0)
{
# se carga una fila con todas las columas de la fila en cuestion
lll <- tabla[i,]
for(j in 1: 348)
{
#aca metemos la logica de conversión para poder hacer correctamente el booleano
#tenemos que obtener este elemento limpio lll[,1]
#
sentenceString <- toString(lll[,1])
searchString <- ' '
replacementString <- ''
sentenceString = sub(searchString,replacementString,sentenceString)
sentenceString
#
ww<-names(w[j])
vv<-tolower(ww)
if(lll[,1]==vv)
{
lll <- cbind(lll,w[[j]])
lll <- cbind(lll,"2006")
}
}
####### A lll(que es una fila) tenemos que adjuntar le una nueva columna: w[[i]]
####### tenemos que adjuntarle otra columna en duro llamada 2006
# debemos establecer un ciclo for para dentro de el establecer una condicion IF que compare la columna "a" de tabla con names(w[i])
# y que si se produce el match que asigne a lll el elemento w[[i]]
ppp <-rbind(ppp,lll)
}
}
w <- dataset2006[[6]] %>% attr('labels')
#### Aqui se obtienen los nombres de las comunas
a <- names(w)
length(b)
# head(a,5)
w <- dataset2006[[6]] %>% attr('labels')
#### Aqui se obtienen los nombres de las comunas
a <- names(w)
a
length(b)
# head(a,5)
w <- dataset2006[[6]] %>% attr('labels')
w
#### Aqui se obtienen los nombres de las comunas
a <- names(w)
a
length(b)
# head(a,5)
w <- dataset2006[[6]] %>% attr('labels')
w
#### Aqui se obtienen los nombres de las comunas
a <- names(w)
a
b<-w[[]]
w <- dataset2006[[6]] %>% attr('labels')
w
#### Aqui se obtienen los nombres de las comunas
a <- names(w)
a
b<-w[[4]]
b
# head(a,5)
tabla <- as.data.frame(cross_tab)
head(tabla,10)
sentenceString == vv[4]
ww<-names(w)
vv<-tolower(ww)
ww<-names(w)
vv<-tolower(ww)
vv
ww<-names(w)
vv<-tolower(ww)
vv
sentenceString <- toString(lll[,1])
searchString <- ' '
replacementString <- ''
sentenceString = sub(searchString,replacementString,sentenceString)
sentenceString
ppp <- data_frame()
#vamos a recorrer todos los elementos de la tabla de frecuencia, si este valor es existente construimos un arreglo con la fila y lo arreglamos para que sea concistente en la comparacion del if
for( i in 1: nrow(tabla))
{
if(tabla[i,5]!=0)
{
lll<-tabla[i,]
lll
llll<-lll[,1]
llll
sentenceString <- toString(llll[,1])
searchString <- ' '
replacementString <- ''
sentenceString = sub(searchString,replacementString,sentenceString)
sentenceString
for(j in 1: 300){
w <- dataset2006[[6]] %>% attr('labels')
ww<-names(w[j])
vv<-tolower(ww)
if(sentenceString==vv){
lll <- cbind(lll,w[[j]])
lll <- cbind(lll,"2006")
}
}
}
}
ppp <- data_frame()
#vamos a recorrer todos los elementos de la tabla de frecuencia, si este valor es existente construimos un arreglo con la fila y lo arreglamos para que sea concistente en la comparacion del if
for( i in 1: nrow(tabla))
{
if(tabla[i,5]!=0)
{
lll<-tabla[i,]
lll
llll<-lll[,1]
llll
sentenceString <- toString(llll)
searchString <- ' '
replacementString <- ''
sentenceString = sub(searchString,replacementString,sentenceString)
sentenceString
for(j in 1: 300){
w <- dataset2006[[6]] %>% attr('labels')
ww<-names(w[j])
vv<-tolower(ww)
if(sentenceString==vv){
lll <- cbind(lll,w[[j]])
lll <- cbind(lll,"2006")
}
}
}
}
lll
ppp <- data_frame()
#vamos a recorrer todos los elementos de la tabla de frecuencia, si este valor es existente construimos un arreglo con la fila y lo arreglamos para que sea concistente en la comparacion del if
for( i in 1: nrow(tabla))
{
if(tabla[i,5]!=0)
{
lll<-tabla[i,]
lll
llll<-lll[,1]
llll
sentenceString <- toString(llll)
searchString <- ' '
replacementString <- ''
sentenceString = sub(searchString,replacementString,sentenceString)
sentenceString
for(j in 1: 300){
w <- dataset2006[[6]] %>% attr('labels')
ww<-names(w[j])
vv<-tolower(ww)
if(sentenceString==vv){
ppp <- cbind(lll,w[[j]])
ppp <- cbind(lll,"2006")
}
}
}
}
ppp <- data_frame()
#vamos a recorrer todos los elementos de la tabla de frecuencia, si este valor es existente construimos un arreglo con la fila y lo arreglamos para que sea concistente en la comparacion del if
for( i in 1: nrow(tabla))
{
if(tabla[i,5]!=0)
{
lll<-tabla[i,]
lll
llll<-lll[,1]
llll
sentenceString <- toString(llll)
searchString <- ' '
replacementString <- ''
sentenceString = sub(searchString,replacementString,sentenceString)
sentenceString
for(j in 1: 300){
w <- dataset2006[[6]] %>% attr('labels')
ww<-names(w[j])
vv<-tolower(ww)
if(sentenceString==vv){
ppp <- cbind(ppp,w[[j]])
ppp <- cbind(ppp,"2006")
}
}
}
}
ppp <- data_frame()
#vamos a recorrer todos los elementos de la tabla de frecuencia, si este valor es existente construimos un arreglo con la fila y lo arreglamos para que sea concistente en la comparacion del if
for( i in 1: nrow(tabla))
{
if(tabla[i,5]!=0)
{
lll<-tabla[i,]
lll
llll<-lll[,1]
llll
sentenceString <- toString(llll)
searchString <- ' '
replacementString <- ''
sentenceString = sub(searchString,replacementString,sentenceString)
sentenceString
for(j in 1: 300){
w <- dataset2006[[6]] %>% attr('labels')
ww<-names(w[j])
vv<-tolower(ww)
if(sentenceString==vv){
lll <- cbind(lll,w[[j]])
lll <- cbind(lll,"2006")
}
}
}
}
lll
tabla <- as.data.frame(cross_tab)
#head(tabla,10)
tabla
ppp <- data_frame()
#vamos a recorrer todos los elementos de la tabla de frecuencia, si este valor es existente construimos un arreglo con la fila y lo arreglamos para que sea concistente en la comparacion del if
for( i in 1: nrow(tabla))
{
if(tabla[i,5]!=0)
{
lll<-tabla[i,]
lll
llll<-lll[,1]
llll
sentenceString <- toString(llll)
searchString <- ' '
replacementString <- ''
sentenceString = sub(searchString,replacementString,sentenceString)
sentenceString
for(j in 1: 300){
w <- dataset2006[[6]] %>% attr('labels')
ww<-names(w[j])
vv<-tolower(ww)
if(sentenceString==vv){
lll <- cbind(lll,w[[j]])
lll <- cbind(lll,"2006")
}
}
ppp <-rbind(ppp,lll)
}
}
ppp
#################### en "b" se almacenan los codigos
b <- w[[4]]
head(b,5)
length(b)
#################### en "b" se almacenan los codigos
b <- w[[4]]
head(b,5)
length(b)
dataset06 <- read.csv('mydata2006_sub.csv')
a <- dataset06$comuna
b <- dataset06$t4
c <- dataset06$e1
d <- dataset06$sexo
cross_tab= table(a, b, c, d, exclude=c(0))
cross_tab
tabla <- as.data.frame(cross_tab)
#head(tabla,10)
tabla
dataset06 <- read.csv('mydata2006_sub.csv')
a <- dataset06$comuna
b <- dataset06$t4
c <- dataset06$e1
d <- dataset06$sexo
cross_tab= table(a, b, c, d)
cross_tab
dataset2006 <- read_sav('casen2006.sav')
library(ggplot2)
library(ggpubr)
library(markdown)
library(shiny)
library(shinythemes)
library(tidyverse)
library(magrittr)
library(lubridate)
library(plotly)
library(xts)
library(dygraphs)
library(kableExtra)
library(knitr)
library("readxl")
library(rsconnect)
library(dplyr)
library(summarytools)
library(epiDisplay)
#library(leaflet)
library(haven)
library(epiDisplay)
library("readxl")
library(expss)
library(hrbrthemes)
library(viridis)
library(viridisLite)
library(DescTools)
library(roperators)
library(shinycssloaders)
library(writexl)
library(labelled)
library(tidyverse)
library(haven)
library(readr)
library(sjmisc)
library(WriteXLS)
length(dataset2006)
w <- dataset2006[[6]] %>% attr('labels')
w
#### Aqui se obtienen los nombres de las comunas
a <- names(w)
a
b<-w[[4]]
b
# head(a,5)
w <- dataset2006[[6]] %>% attr('labels')
head(w,4)
#### Aqui se obtienen los nombres de las comunas
a <- names(w)
head(a,4)
b<-w[[4]]
b
# head(a,5)
dataset06 <- read.csv('mydata2006_sub.csv')
a <- dataset06$comuna
b <- dataset06$t4
c <- dataset06$e1
d <- dataset06$sexo
cross_tab= table(a, b, c, d)
cross_tab
tabla <- as.data.frame(cross_tab)
#head(tabla,10)
tabla
ppp <- data_frame()
#vamos a recorrer todos los elementos de la tabla de frecuencia, si este valor es existente construimos un arreglo con la fila y lo arreglamos para que sea concistente en la comparacion del if
for( i in 1: nrow(tabla))
{
if(tabla[i,5]!=0)
{
lll<-tabla[i,]
lll
llll<-lll[,1]
llll
sentenceString <- toString(llll)
searchString <- ' '
replacementString <- ''
sentenceString = sub(searchString,replacementString,sentenceString)
sentenceString
for(j in 1: 300){
w <- dataset2006[[6]] %>% attr('labels')
ww<-names(w[j])
vv<-tolower(ww)
if(sentenceString==vv){
lll <- cbind(lll,w[[j]])
lll <- cbind(lll,"2006")
}
}
ppp <-rbind(ppp,lll)
}
}
ppp
ppp <- data_frame()
#vamos a recorrer todos los elementos de la tabla de frecuencia, si este valor es existente construimos un arreglo con la fila y lo arreglamos para que sea concistente en la comparacion del if
for( i in 1: nrow(tabla))
{
if(tabla[i,5]!=0)
{
lll<-tabla[i,]
lll
llll<-lll[,1]
llll
sentenceString <- toString(llll)
searchString <- ' '
replacementString <- ''
sentenceString = sub(searchString,replacementString,sentenceString)
sentenceString
for(j in 1: 300){
w <- dataset2006[[6]] %>% attr('labels')
ww<-names(w[j])
vv<-tolower(ww)
if(sentenceString==vv){
lll <- cbind(lll,w[[j]])
lll <- cbind(lll,"2006")
}
}
ppp <-rbind(ppp,lll)
}
}
ppp
library(ggplot2)
library(ggpubr)
library(markdown)
library(shiny)
library(shinythemes)
library(tidyverse)
library(magrittr)
library(lubridate)
library(plotly)
library(xts)
library(dygraphs)
library(kableExtra)
library(knitr)
library("readxl")
library(rsconnect)
library(dplyr)
library(summarytools)
library(epiDisplay)
#library(leaflet)
library(haven)
library(epiDisplay)
library("readxl")
library(expss)
library(hrbrthemes)
library(viridis)
library(viridisLite)
library(DescTools)
library(roperators)
library(shinycssloaders)
library(writexl)
library(labelled)
library(tidyverse)
library(haven)
library(readr)
library(sjmisc)
library(WriteXLS)
oldw <- getOption("warn")
options(warn = -1)
ppp
options(warn = oldw)
dataset2006 <- read_sav('casen2006.sav')
